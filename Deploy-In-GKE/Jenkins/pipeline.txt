pipeline {
    agent any
    environment {
        REPO_RELEASE_VERSION = '*/${releaseVersion}'
        SONAR_PRO_KEY = 'CICDTestService'
        SONAR_PRO_VERSION = '1.0'
        CHECKSUM =''
        GCR_REPO = "us-east1-docker.pkg.dev/lftest-407308/cicdtest/cicdtest:${releaseVersion}"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: "$REPO_RELEASE_VERSION"]], extensions: [], userRemoteConfigs: [[credentialsId: 'jaiGitlabSecrect', url: 'https://gitlab.com/jayakumar97/cicdtest.git']])
            }
        }
        stage('Build') {
            tools {
                jdk 'java-8'
            }
            steps {
                sh 'chmod -R 755 .'
                sh './gradlew clean -Pversion=${releaseVersion} build'
            }
        }
        stage ('Scan') {
            tools {
                jdk 'java-8'
            }
            steps {
                withSonarQubeEnv(installationName: 'Sonar_12', credentialsId: 'sonar') {
                sh "./gradlew sonarqube \
                  -Dsonar.projectKey=$SONAR_PRO_KEY \
                  -Dsonar.projectName=$SONAR_PRO_KEY \
                  -Dsonar.projectVersion=$SONAR_PRO_VERSION"
                }
             }
        }
        stage('Docker Build') {
            steps { 
                    echo 'Building docker Image'
                    sh "docker build -t cicdtest:${releaseVersion} ."
                }
        }
        stage('Publish to GCR') {
            steps {
                sh "docker tag cicdtest:${releaseVersion} ${GCR_REPO}"
                sh 'cat /home/logicfocus/jai/gcpcredbase64.json | docker login -u _json_key_base64 --password-stdin https://us-east1-docker.pkg.dev'
                sh 'docker push ${GCR_REPO}'
                sh 'docker logout https://us-east1-docker.pkg.dev'
            }
        }
    }
    post {
        success {
            sh 'docker logout'
            archiveArtifacts artifacts: 'k0s-deployment.yaml', onlyIfSuccessful: true
            archiveArtifacts artifacts: 'k0s-service.yaml', onlyIfSuccessful: true
            archiveArtifacts artifacts: 'app-Deployment.yaml', onlyIfSuccessful: true
            archiveArtifacts artifacts: 'db-deployment.yaml', onlyIfSuccessful: true
            archiveArtifacts artifacts: 'mysql-configMap.yaml', onlyIfSuccessful: true
            archiveArtifacts artifacts: 'mysql-secrets.yaml', onlyIfSuccessful: true
        }
    }
}
