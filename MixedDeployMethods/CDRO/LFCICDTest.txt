pipeline 'LFCICDTest', {
  projectName = 'jai'

  formalParameter 'releaseVersion', defaultValue: '', {
    label = 'Release Version'
    orderIndex = '1'
    type = 'entry'
  }

  formalParameter 'componentDeployment', defaultValue: 'false', {
    checkedValue = 'true'
    label = 'Component Deployment'
    orderIndex = '2'
    type = 'checkbox'
    uncheckedValue = 'false'
  }

  formalParameter 'kubernetesDeployment', defaultValue: 'false', {
    checkedValue = 'true'
    label = 'Kubernetes Deployment'
    orderIndex = '3'
    type = 'checkbox'
    uncheckedValue = 'false'
  }

  formalParameter 'deployInGCP', defaultValue: 'false', {
    checkedValue = 'true'
    label = 'Deploy in GCP'
    orderIndex = '4'
    type = 'checkbox'
    uncheckedValue = 'false'
  }

  formalParameter 'ec_stagesToRun', {
    expansionDeferred = '1'
  }

  stage 'Build', {
    colorCode = '#289ce1'
    pipelineName = 'LFCICDTest'
    gate 'PRE', {
      }

    gate 'POST', {
      }

    task 'Create Branch', {
      actualParameter = [
        'commandToRun': '''#echo "====>$[/projects[jai]/credentials[GitlabAccessToken]]/password"
#!/bin/bash

ISBRANCHEXIST=$(curl --header "PRIVATE-TOKEN:$[/myPipeline/gitLabAccessToken]" "https://gitlab.com/api/v4/projects/$[/myPipeline/CICDTestServiceId]/repository/branches/$[releaseVersion]")
if echo "$ISBRANCHEXIST" | grep -q "404 Branch Not Found"; then
    curl --request POST --header "PRIVATE-TOKEN:$[/myPipeline/gitLabAccessToken]" "https://gitlab.com/api/v4/projects/$[/myPipeline/CICDTestServiceId]/repository/branches?branch=$[releaseVersion]&ref=$[/myPipeline/referenceBranch]"
else
    echo "Branch already exists"
fi''',
      ]
      subpluginKey = 'EC-Core'
      subprocedure = 'RunCommand'
      taskType = 'COMMAND'
    }

    task 'CI Build', {
      actualParameter = [
        'releaseVersion': '$[releaseVersion]',
      ]
      ciConfigurationName = 'jenkins75'
      ciJobFolder = 'Jai/'
      ciJobName = 'CICDTestService'
      condition = '$[/javascript myPipelineRuntime.componentDeployment] || $[/javascript myPipelineRuntime.deployInGCP]'
      subproject = 'jai'
      taskType = 'CI_JOB'
    }

    task 'Download Build Artifact', {
      actualParameter = [
        'artifacts': 'Build.txt',
        'build_number': '',
        'config_name': '/projects/jai/pluginConfigurations/JenkinsCICDTestService',
        'job_name': 'CICDTestService',
        'target_directory': '',
      ]
      condition = '$[/javascript myPipelineRuntime.componentDeployment] || $[/javascript myPipelineRuntime.deployInGCP]'
      subpluginKey = 'EC-Jenkins'
      subprocedure = 'DownloadArtifacts'
      taskType = 'PLUGIN'
    }

    task 'Read Build Artifact', {
      actualParameter = [
        'commandToRun': '''use ElectricCommander;
use Path::Tiny;

my $ec = ElectricCommander->new();
$ec->abortOnError(0);

my $artifcatLoc = "$[/myWorkspace/agentUnixPath]";
my $jobName = "$[/myStageRuntime/tasks/Download Build Artifact/job/name]";
print("======>>>$artifcatLoc/$jobName");

my $buildData = "$artifcatLoc/$jobName/Build.txt";

my $file_contents = path($buildData)->slurp;

$ec->setProperty("/myPipelineRuntime/buildData", $file_contents);''',
        'shellToUse': 'cb-perl',
      ]
      condition = '$[/javascript myPipelineRuntime.componentDeployment] || $[/javascript myPipelineRuntime.deployInGCP]'
      subpluginKey = 'EC-Core'
      subprocedure = 'RunCommand'
      taskType = 'COMMAND'
    }

    task 'CI Build with docker', {
      actualParameter = [
        'releaseVersion': '$[releaseVersion]',
      ]
      ciConfigurationName = 'jenkins75'
      ciJobFolder = 'Jai/'
      ciJobName = 'CICDTestKubernetes'
      condition = '$[/javascript myPipelineRuntime.kubernetesDeployment]'
      subproject = 'jai'
      taskType = 'CI_JOB'
    }
  }

  stage 'Pre Prod', {
    colorCode = '#ff7f0e'
    condition = '$[/javascript myPipelineRuntime.componentDeployment]'
    pipelineName = 'LFCICDTest'
    gate 'PRE', {
      }

    gate 'POST', {
      }

    task 'Call App Comp', {
      actualParameter = [
        'artifactBuildInfo': '$[/myPipelineRuntime/buildData]',
        'ec_enforceDependencies': '1',
        'ec_smartDeployOption': '0',
        'ec_stageArtifacts': '1',
        'releaseVersion': '$[releaseVersion]',
      ]
      environmentName = 'CICDTestServicePreProd'
      environmentProjectName = 'jai'
      rollingDeployEnabled = '0'
      subapplication = 'jai'
      subprocess = 'Deploy'
      subproject = 'jai'
      taskProcessType = 'APPLICATION'
      taskType = 'PROCESS'
    }

    task 'Quality Gate', {
      actualParameter = [
        'commandToRun': '''import groovy.json.JsonSlurper
import com.electriccloud.client.groovy.ElectricFlow
import com.electriccloud.client.groovy.models.*

ElectricFlow ef = new ElectricFlow()
def jsonSlurper = new JsonSlurper()
  
def proc = "curl --location -X GET http://192.168.1.12:9000/api/issues/search?componentKeys=CICDTestService&facets=severities&pullRequest=66&resolved=false".execute().text
def responseAsJson = jsonSlurper.parseText(proc)
def sonarMetrics = responseAsJson.facets[0].values
def metrics = [:]
sonarMetrics.each { metrics[it.val]=it.count}
def dependencyTrackerProc = "curl --location -X GET http://192.168.1.30:8084/api/v1/metrics/project/4d0d5eda-a3ed-4a8a-8789-bbd437e08cff/current --header X-Api-Key:odt_CqAAWRarFqMKczrIV8liZLuyum9i2NIn".execute().text
def dcResponse = jsonSlurper.parseText(dependencyTrackerProc)
def sonarTickMarkColor = "green"
def dependencyTickMarkColor = "green"
if($[/myProject/sonarCritical] < metrics.get("CRITICAL") || $[/myProject/sonarMajor] < metrics.get("MAJOR") || $[/myProject/sonarBlocker] < metrics.get("BLOCKER")){
  sonarTickMarkColor = "red"
}
if($[/myProject/dependencyCritical] < dcResponse.get("critical") || $[/myProject/dependencyHigh] < dcResponse.get("high") || $[/myProject/dependencyMedium] < dcResponse.get("medium")){
  dependencyTickMarkColor = "red"
}
def sonarAnalysis = """<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;
}
th{
  background-color: aliceblue !important;
  font-size:15px !important;
}
</style>
</head>
<body>
<h4 style="margin-top: -163px;float: left;">Sonar analysis
<i class="fa fa-check-circle" style="font-size: 25px; margin-right: -30px; float: right;margin-top: -22px;color:${sonarTickMarkColor}"></i>
</h4>
<table style="margin-top: -146px;">
  <tr>
	<th></th>
	<th>Blocker</th>
	<th>Critical</th>
	<th>Major</th>
    <th>Minor</th>
  </tr>
  <tr>
	<td>Actual</td>
	<td>${metrics.get("BLOCKER")}</td>
	<td>${metrics.get("CRITICAL")}</td>
	<td>${metrics.get("MAJOR")}</td>
    <td>${metrics.get("MINOR")}</td>
  </tr>
<tr>
	<td>Expected</td>
	<td>${$[/myProject/sonarBlocker]}</td>
	<td>${$[/myProject/sonarCritical]}</td>
	<td>${$[/myProject/sonarMajor]}</td>
    <td>-</td>
  </tr>
</table>
<h4 style="margin-top: -13px;float: left;margin-bottom: -8px;">Dependency Analysis
<i class="fa fa-check-circle" style="font-size: 25px; margin-right: -30px; float: right;margin-top: -22px;color:${dependencyTickMarkColor}"></i>
</h4>
<table style="margin-top: -18px;">
  <tr>
	<th></th>
    <th>Critical</th>
    <th>High</th>
	<th>Medium</th>
    <th>Low</th>
	<th>Unassigned</th>
	<th>Vulnerabilities</th>
  </tr>
  <tr>
	<td>Actual</td>
    <td>${dcResponse.get("critical")}</td>
	<td>${dcResponse.get("high")}</td>
	<td>${dcResponse.get("medium")}</td>
	<td>${dcResponse.get("low")}</td>
	<td>${dcResponse.get("unassigned")}</td>
	<td>${dcResponse.get("vulnerabilities")}</td>
  </tr>
  <tr>
	<td>Expected</td>
    <td>${$[/myProject/dependencyCritical]}</td>
	<td>${$[/myProject/dependencyHigh]}</td>
	<td>${$[/myProject/dependencyMedium]}</td>
	<td>-</td>
	<td>-</td>
	<td>-</td>
  </tr>
</table>

</body>
</html>"""
def result = ef.setProperty(propertyName: \'/myPipelineStageRuntime/ec_summary/Quality Gate\',value: sonarAnalysis )
''',
        'shellToUse': 'ec-groovy',
      ]
      subpluginKey = 'EC-Core'
      subprocedure = 'RunCommand'
      taskType = 'COMMAND'
    }
  }

  stage 'Kubernetes Deploy', {
    colorCode = '#2ca02c'
    condition = '$[/javascript myPipelineRuntime.kubernetesDeployment]'
    pipelineName = 'LFCICDTest'
    resourceName = ''

    gate 'PRE', {
      }

    gate 'POST', {
      }

    task 'Get Deployment and Service File', {
      actualParameter = [
        'artifacts': '*.yaml',
        'build_number': '',
        'config_name': '/projects/jai/pluginConfigurations/JenkinsCICDTestService',
        'job_name': 'CICDTestKubernetes',
        'target_directory': '',
      ]
      resourceName = 'cheetah'
      subpluginKey = 'EC-Jenkins'
      subprocedure = 'DownloadArtifacts'
      taskType = 'PLUGIN'
    }

    task 'Apply Deployment Obj', {
      actualParameter = [
        'additionalOptionsForKubectl': '',
        'additionalOptionsForKubectlCommand': '',
        'config': '/projects/jai/pluginConfigurations/kos-config',
        'fileContent': '',
        'filePath': ' /opt/cloudbees/sda/workspace/$[/myStageRuntime/tasks/Get Deployment and Service File/job/name]/k0s-deployment.yaml',
        'resultPropertyPath': '/myJob',
        'specSource': 'filePath',
        'updateAction': 'apply',
      ]
      resourceName = 'cheetah'
      subpluginKey = 'EC-Kubectl'
      subprocedure = 'Create Or Update Objects'
      taskType = 'PLUGIN'
    }

    task 'Apply Service Obj', {
      actualParameter = [
        'additionalOptionsForKubectl': '',
        'additionalOptionsForKubectlCommand': '',
        'config': '/projects/jai/pluginConfigurations/kos-config',
        'fileContent': '',
        'filePath': '/opt/cloudbees/sda/workspace/$[/myStageRuntime/tasks/Get Deployment and Service File/job/name]/k0s-service.yaml',
        'resultPropertyPath': '/myJob',
        'specSource': 'filePath',
        'updateAction': 'apply',
      ]
      resourceName = 'cheetah'
      subpluginKey = 'EC-Kubectl'
      subprocedure = 'Create Or Update Objects'
      taskType = 'PLUGIN'
    }

    task 'CMD', {
      actualParameter = [
        'commandToRun': '''kubectl get deployments
echo "================"
kubectl get pods
echo "================"
kubectl get service
echo "================"
kubectl get nodes -o wide''',
      ]
      resourceName = 'cheetah'
      subpluginKey = 'EC-Core'
      subprocedure = 'RunCommand'
      taskType = 'COMMAND'
    }
  }

  stage 'GCP ENV', {
    colorCode = '#ff7f0e'
    condition = '$[/javascript myPipelineRuntime.deployInGCP]'
    pipelineName = 'LFCICDTest'
    resourceName = 'GCPTest'

    gate 'PRE', {
      }

    gate 'POST', {
      }

    task 'Call App Comp', {
      actualParameter = [
        'artifactBuildInfo': '$[/myPipelineRuntime/buildData]',
        'ec_enforceDependencies': '1',
        'ec_smartDeployOption': '0',
        'ec_stageArtifacts': '1',
        'releaseVersion': '$[releaseVersion]',
      ]
      environmentName = 'GCPEnv'
      environmentProjectName = 'jai'
      rollingDeployEnabled = '0'
      subapplication = 'jai'
      subprocess = 'Deploy'
      subproject = 'jai'
      taskProcessType = 'APPLICATION'
      taskType = 'PROCESS'
    }

    task 'Quality Gate', {
      actualParameter = [
        'commandToRun': '''import groovy.json.JsonSlurper
import com.electriccloud.client.groovy.ElectricFlow
import com.electriccloud.client.groovy.models.*

ElectricFlow ef = new ElectricFlow()
def jsonSlurper = new JsonSlurper()
  
def proc = "curl --location -X GET http://103.99.149.57:9000/api/issues/search?componentKeys=CICDTestService&facets=severities&pullRequest=66&resolved=false".execute().text
def responseAsJson = jsonSlurper.parseText(proc)
def sonarMetrics = responseAsJson.facets[0].values
def metrics = [:]
sonarMetrics.each { metrics[it.val]=it.count}
def dependencyTrackerProc = "curl --location -X GET http://103.99.149.57:8084/api/v1/metrics/project/4d0d5eda-a3ed-4a8a-8789-bbd437e08cff/current --header X-Api-Key:odt_CqAAWRarFqMKczrIV8liZLuyum9i2NIn".execute().text
def dcResponse = jsonSlurper.parseText(dependencyTrackerProc)
def sonarTickMarkColor = "green"
def dependencyTickMarkColor = "green"
if($[/myProject/sonarCritical] < metrics.get("CRITICAL") || $[/myProject/sonarMajor] < metrics.get("MAJOR") || $[/myProject/sonarBlocker] < metrics.get("BLOCKER")){
  sonarTickMarkColor = "red"
}
if($[/myProject/dependencyCritical] < dcResponse.get("critical") || $[/myProject/dependencyHigh] < dcResponse.get("high") || $[/myProject/dependencyMedium] < dcResponse.get("medium")){
  dependencyTickMarkColor = "red"
}
def sonarAnalysis = """<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
  text-align: left;
}
th{
  background-color: aliceblue !important;
  font-size:15px !important;
}
</style>
</head>
<body>
<h4 style="margin-top: -163px;float: left;">Sonar analysis
<i class="fa fa-check-circle" style="font-size: 25px; margin-right: -30px; float: right;margin-top: -22px;color:${sonarTickMarkColor}"></i>
</h4>
<table style="margin-top: -146px;">
  <tr>
	<th></th>
	<th>Blocker</th>
	<th>Critical</th>
	<th>Major</th>
    <th>Minor</th>
  </tr>
  <tr>
	<td>Actual</td>
	<td>${metrics.get("BLOCKER")}</td>
	<td>${metrics.get("CRITICAL")}</td>
	<td>${metrics.get("MAJOR")}</td>
    <td>${metrics.get("MINOR")}</td>
  </tr>
<tr>
	<td>Expected</td>
	<td>${$[/myProject/sonarBlocker]}</td>
	<td>${$[/myProject/sonarCritical]}</td>
	<td>${$[/myProject/sonarMajor]}</td>
    <td>-</td>
  </tr>
</table>
<h4 style="margin-top: -13px;float: left;margin-bottom: -8px;">Dependency Analysis
<i class="fa fa-check-circle" style="font-size: 25px; margin-right: -30px; float: right;margin-top: -22px;color:${dependencyTickMarkColor}"></i>
</h4>
<table style="margin-top: -18px;">
  <tr>
	<th></th>
    <th>Critical</th>
    <th>High</th>
	<th>Medium</th>
    <th>Low</th>
	<th>Unassigned</th>
	<th>Vulnerabilities</th>
  </tr>
  <tr>
	<td>Actual</td>
    <td>${dcResponse.get("critical")}</td>
	<td>${dcResponse.get("high")}</td>
	<td>${dcResponse.get("medium")}</td>
	<td>${dcResponse.get("low")}</td>
	<td>${dcResponse.get("unassigned")}</td>
	<td>${dcResponse.get("vulnerabilities")}</td>
  </tr>
  <tr>
	<td>Expected</td>
    <td>${$[/myProject/dependencyCritical]}</td>
	<td>${$[/myProject/dependencyHigh]}</td>
	<td>${$[/myProject/dependencyMedium]}</td>
	<td>-</td>
	<td>-</td>
	<td>-</td>
  </tr>
</table>

</body>
</html>"""
def result = ef.setProperty(propertyName: \'/myPipelineStageRuntime/ec_summary/Quality Gate\',value: sonarAnalysis )
''',
        'shellToUse': 'ec-groovy',
      ]
      subpluginKey = 'EC-Core'
      subprocedure = 'RunCommand'
      taskType = 'COMMAND'
    }
  }

  stage 'Deploy via Terraform', {
    colorCode = '#d62728'
    pipelineName = 'LFCICDTest'
    gate 'PRE', {
      }

    gate 'POST', {
      }

    task 'CMD', {
      actualParameter = [
        'commandToRun': 'rm -f /home/logicfocus/terraform/main.tf /home/logicfocus/terraform/plan /home/logicfocus/terraform/terraform.tfstate /home/logicfocus/terraform/terraform.tfstate.backup /home/logicfocus/terraform/terraform_1.0.7_linux_amd64.zip /home/logicfocus/terraform/terraform_1.6.5_linux_amd64.zip /home/logicfocus/terraform/startUp.sh.save',
      ]
      resourceName = 'LFServer75'
      subpluginKey = 'EC-Core'
      subprocedure = 'RunCommand'
      taskType = 'COMMAND'
    }

    task 'Permission', {
      actualParameter = [
        'commandToRun': 'echo "lf@2022" | sudo -S chmod 777 -R /home/logicfocus/terraform',
      ]
      resourceName = 'LFServer75'
      subpluginKey = 'EC-Core'
      subprocedure = 'RunCommand'
      taskType = 'COMMAND'
    }

    task 'Check', {
      actualParameter = [
        'Filter': '',
        'Separator': '',
        'TargetDir': '/home/logicfocus/terraform',
      ]
      resourceName = 'LFServer75'
      subpluginKey = 'EC-FileOps'
      subprocedure = 'ListFiles'
      taskType = 'PLUGIN'
    }

    task 'File', {
      actualParameter = [
        'Mode': '0777',
        'Name': '/home/logicfocus/terraform/main.tf',
      ]
      resourceName = 'LFServer75'
      subpluginKey = 'EC-FileOps'
      subprocedure = 'CreateEmptyFile'
      taskType = 'PLUGIN'
    }

    task 'Add content', {
      actualParameter = [
        'AddNewLine': '1',
        'Append': '0',
        'Content': '''locals {
  project_id = var.project_id
  serverSecrect = "lf@2022"
}
variable "gcp-creds" {
  default= ""
}
provider "google" {
  project = local.project_id
  credentials = file("${var.gcp-creds}")
  region  = "us-east1"
  zone    = "us-east1-b"
}

resource "google_compute_instance" "vm_instance" {
  name         = "lf-instancetest"
  machine_type = "e2-medium"

  tags = ["cdropublicegr", "cdropublicing", "cloudbeescdro", "default-allow-https", "vmpub", "cicd-test-egress", "cicd-test-rule"]

  boot_disk {
    initialize_params {
      image = "debian-11-bullseye-v20231115"
    }
  }
  network_interface {
    network = "default"
    access_config {}
  }

  metadata = {
    ssh-keys = "gce:${file("/home/logicfocus/.ssh/id_rsa.pub")}"
  }

  provisioner "remote-exec" {
    inline = [
      "wget -O - https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg && echo \\"deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main\\" | sudo tee /etc/apt/sources.list.d/corretto.list",
      "sudo apt-get update; sudo apt-get install -y java-1.8.0-amazon-corretto-jdk -y",
    ]
    connection {
      type        = "ssh"
      user        = "gce"
      private_key = file("/home/logicfocus/.ssh/id_rsa")
      host        = self.network_interface[0].access_config[0].nat_ip
    }
  }

  provisioner "file" {
    source      = "/home/logicfocus/jai/cicdtest/build/libs/gradleSampleArt.jar"
    destination = "/tmp/gradleSampleArt.jar"
    connection {
      type        = "ssh"
      user        = "gce"
      private_key = file("/home/logicfocus/.ssh/id_rsa")
      host        = self.network_interface[0].access_config[0].nat_ip
    }
  }

  provisioner "remote-exec" {
    inline = [
      "ls /tmp/ && java -version"
    ]
    connection {
      type        = "ssh"
      user        = "gce"
      private_key = file("/home/logicfocus/.ssh/id_rsa")
      host        = self.network_interface[0].access_config[0].nat_ip
    }
  }

  provisioner "remote-exec" {
    inline = [
      "ls /tmp/ && java -version && nohup java -jar /tmp/gradleSampleArt.jar > /tmp/result.log &"
    ]
    connection {
      type        = "ssh"
      user        = "gce"
      private_key = file("/home/logicfocus/.ssh/id_rsa")
      host        = self.network_interface[0].access_config[0].nat_ip
    }
  }
  
}
output "ip" {
  value = "${google_compute_instance.vm_instance.network_interface.0.access_config.0.nat_ip}"
}''',
        'Path': '/home/logicfocus/terraform/main.tf',
      ]
      resourceName = 'LFServer75'
      subpluginKey = 'EC-FileOps'
      subprocedure = 'AddTextToFile'
      taskType = 'PLUGIN'
    }

    task 'Init working Dir', {
      actualParameter = [
        'config': '/projects/jai/pluginConfigurations/TerraForm75Server',
        'tfCommandArguments': '''-var \'project_id=lftest-407308\'
-var \'gcp-creds=/home/logicfocus/terraform/gcpcred.json\'''',
      ]
      resourceName = 'LFServer75'
      subpluginKey = 'EC-Terraform'
      subprocedure = 'Init'
      taskType = 'PLUGIN'
    }

    task 'Plan', {
      actualParameter = [
        'config': '/projects/jai/pluginConfigurations/TerraForm75Server',
        'tfCommandArguments': '''-var \'project_id=lftest-407308\'
-var \'gcp-creds=/home/logicfocus/terraform/gcpcred.json\'''',
        'tfPlanName': 'plan',
      ]
      resourceName = 'LFServer75'
      subpluginKey = 'EC-Terraform'
      subprocedure = 'Plan'
      taskType = 'PLUGIN'
    }

    task 'Create VM', {
      actualParameter = [
        'config': '/projects/jai/pluginConfigurations/TerraForm75Server',
        'tfCommandArguments': '',
        'tfOutputProperty': '/myJob/showResults',
        'tfPlanName': 'plan',
      ]
      resourceName = 'LFServer75'
      subpluginKey = 'EC-Terraform'
      subprocedure = 'Apply'
      taskType = 'PLUGIN'
    }

    task 'Provisinor', {
      actualParameter = [
        'config': '/projects/jai/pluginConfigurations/TerraForm75Server',
        'tfConfigContent': '''
    variables {
        zone = "us-east1-b",
        project = "$[/myPipeline/GCPProjectId]",
        source_image = "debian-11-bullseye-v20231115",
        ssh_username = "root",
        credentials_path = "/home/logicfocus/terraform/gcpcred.json"
    },
    builders [
        {
            type = "googlecompute",
            account_file = "{{user `credentials_path`}}",
            project_id = "{{user `project`}}",
            source_image "{{user `source_image`}}",
            ssh_username "{{user `ssh_username`}}",
            zone = "{{user `zone`}}",
            image_name = "debian-11-bullseye-v20231115"
          }
    ],
    provisioners [
        {
            type = "file",
            source = "/home/logicfocus/jai/cicdtest/build/libs/gradleSampleArt.jar",
            destination = "/tmp"
        },
        {
            type = "shell",
            script = "/tmp",
            execute_command = "nohup java -jar /tmp/gradleSampleArt.jar > /tmp/gradleSampleArtOut.log &"
        }
    ]
''',
        'tfConfigFileLocationType': 'new',
        'tfConfigLocation': '',
        'tfOutputProperty': '/myJob/showResults',
      ]
      enabled = '0'
      resourceName = 'LFServer75'
      subpluginKey = 'EC-Terraform'
      subprocedure = 'Provision'
      taskType = 'PLUGIN'
    }
  }

  // Custom properties

  property 'ec_counters', {

    // Custom properties
    pipelineCounter = '372'
  }

  property 'ec_customEditorData', {

    // Custom properties

    property 'parameters', {

      // Custom properties

      property 'componentDeployment', {

        // Custom properties

        property 'checkedValue', value: 'true'
        formType = 'standard'

        property 'uncheckedValue', value: 'false'
      }

      property 'deployInGCP', {

        // Custom properties

        property 'checkedValue', value: 'true'
        formType = 'standard'

        property 'uncheckedValue', value: 'false'
      }

      property 'kubernetesDeployment', {

        // Custom properties

        property 'checkedValue', value: 'true'
        formType = 'standard'

        property 'uncheckedValue', value: 'false'
      }
    }
  }

  property 'CICDTestServiceId', value: '42296142', {
    suppressValueTracking = '1'
  }

  property 'GCPProjectId', value: 'lftest-407308', {
    suppressValueTracking = '1'
  }

  property 'artifactBuildPath', value: '/home/logicfocus/jai/Build.txt', {
    suppressValueTracking = '1'
  }

  property 'gitLabAccessToken', value: 'glpat-_8xMsbHDzintdaxYMk-k', {
    suppressValueTracking = '1'
  }

  property 'referenceBranch', value: 'develop', {
    description = 'Reference branch from which a release branch will be created'
    suppressValueTracking = '1'
  }
}
